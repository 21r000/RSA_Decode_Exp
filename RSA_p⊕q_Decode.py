# written by : 21r000
# !/usr/bin/env python3

import math
import gmpy2
import binascii


def check_cong(k, _p, _q, _n, xored=None):
    kmask = (1 << k) - 1
    _p &= kmask
    _q &= kmask
    _n &= kmask
    pqm = (_p * _q) & kmask
    return pqm == _n and (xored is None or (_p ^ _q) == (xored & kmask))


def extend(k, a):
    kbit = 1 << (k - 1)
    assert a < kbit
    yield a
    yield a | kbit


def factor(_n, p_xor_q):
    tracked = set([(_p, _q) for _p in [0, 1] for _q in [0, 1]
                   if check_cong(1, _p, _q, _n, p_xor_q)])

    PRIME_BITS = int(math.ceil(math.log(_n, 2) / 2))

    maxtracked = len(tracked)
    for k in range(2, PRIME_BITS + 1):
        newset = set()
        for tp, tq in tracked:
            for newp_ in extend(k, tp):
                for newq_ in extend(k, tq):
                    # Remove symmetry
                    newp, newq = sorted([newp_, newq_])
                    if check_cong(k, newp, newq, _n, p_xor_q):
                        newset.add((newp, newq))

        tracked = newset
        if len(tracked) > maxtracked:
            maxtracked = len(tracked)
    print('Tracked set size: {} (max={})'.format(len(tracked), maxtracked))

    # go through the tracked set and pick the correct (p, q)
    for _p, _q in tracked:
        if _p != 1 and _p * _q == _n:
            return _p, _q

    assert False, 'factors were not in tracked set. Is your p^q correct?'


e = 65537
n = 18161191247959643291205142280021327188137703931205170709609008162119811659429518266296197516091145088099459900315158479546476567019424572927331108102753461072511317560988073308593214607176828993442382385835679814187842831689830666991226712248155170650393694641974361014093141232778179236713326027134307753249374395336340630472635870324452994301655231870189049095993117015087702142205463484980650963196803916756036082850414974953340374983108831016356834501334924343154150789289078033074767273799868433955924794145172195669199028947175635850637166395185885936509967709095688861236048916337133741822217543906056327698319
c = 4673224617832180470268300957717080611188072537623622604989100398182718331074658707873537974322531993533539222796841944600367657242854134063108109487148579211672874968205230427397137939841910198442649154582875349060987087879223562557275580178182247593243177113291321408287614214860380241035786612453232324311870288630170106425571808986690082081521202431540913692547134449265277032679680260897983566716174537396947709525301074104131547166821474834198172717592035326013639189073283864391450628334286338735197779288290995139864771471953734181553830589105698966077803644079907175407067875553138777715881963659496530085991
p_q = 89884656743115795384028931036601228255232905221439084830690768455173945650127779492552330769469902322818501695338388053424454423748893130328004317245356204754645047128923017664437246542234893148798549179292180686537656411924494931024208556767158754821422825437318719377593856192852276019430647306648492703742

p, q = factor(n, p_q)
print("p =", p)
print("q =", q)

d = gmpy2.invert(e, (p - 1) * (q - 1))
m = gmpy2.powmod(c, d, n)

print(binascii.unhexlify(hex(m)[2:]))
